#!/usr/bin/env python3
"""
    gnome3-presenced: Listen for GNOME 3 "user is idle / active" events
    using its' DBUS interfaces.

    Can run a collection of commands when a user is detected as present
    or not present.
"""
from __future__ import print_function
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
import subprocess
import argparse
import logging
import dbus
import stat
import sys
import os


def parse_args():
    user_home = os.path.expanduser('~')
    root_dir = os.path.join(
        user_home, '.local',
        'gnome-presence'
    )
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-i', '--idle-dir',
        default=os.path.join(
            root_dir, 'idle.d'
        ),
        help='Directory for scripts that run when we go idle'
    )
    parser.add_argument(
        '-a', '--active-dir',
        default=os.path.join(
            root_dir, 'active.d'
        ),
        help='Directory for scripts that run when we become active again'
    )
    parser.add_argument(
        '-b', '--both-dir',
        default=os.path.join(
            root_dir, 'both.d'
        ),
        help='Directory scripts that run for idle AND active events'
    )
    parser.add_argument(
        '--active-on-start',
        default=False,
        action='store_true',
        help='Run the scripts for an "active" event when this program starts'
    )
    parser.add_argument(
        '-o', '--one-shot',
        default=False,
        action='store_true',
        help='Quit after the first valid event (hint: can combine with --events)'
    )
    parser.add_argument(
        '-n', '--no-scripts',
        default=False,
        action='store_true',
        help='Don\'t run scripts when idle/active events occur'
    )
    parser.add_argument(
        '-f', '--output-format',
        default=None,
        help='Output format when we get an event: "{state}: {state_id}"'
    )
    parser.add_argument(
        '-e', '--events',
        default=None,
        help='Comma-separated list of events to react to: idle,active'
    )
    parser.add_argument(
        '-s', '--stop-processes',
        default=False,
        action='store_true',
        help='Whether to stop existing processes just before running scripts for an event'
    )
    parser.add_argument(
        '-k', '--kill-processes',
        default=False,
        action='store_true',
        help='Whether to kill existing processes just before running scripts for an event'
    )
    parser.add_argument(
        '-w', '--wait-on-exit',
        default=False,
        action='store_true',
        help='Whether to wait for child processes to quit upon program exit'
    )
    parser.add_argument(
        '-t', '--kill-timeout',
        type=int, default=5,
        help='How many seconds to wait before killing processes if --kill-processes is set'
    )
    parser.add_argument(
        '-v', '--verbose',
        default=False,
        action='store_true',
        help='Chatty output'
    )
    args = parser.parse_args()
    return args


class StateHandler(object):
    def __init__(
            self,
            bus, mainloop,
            idle_dir, active_dir, both_dir,
            one_shot=False, no_scripts=False,
            output_format=None, events=None,
            stop_processes=False, kill_processes=False,
            fork_processes=True, wait_on_exit=True,
            kill_timeout=5
    ):
        self.bus = bus
        self.mainloop = mainloop
        self.dirs = {
            'active': active_dir,
            'idle': idle_dir,
            'both': both_dir
        }
        if events is None:
            events = self.dirs.keys()
        self.events = events
        self.one_shot = one_shot
        self.no_scripts = no_scripts
        self.output_format = output_format
        self.processes = []
        self.stop_processes = stop_processes
        self.kill_processes = kill_processes
        self.fork_processes = fork_processes
        self.wait_on_exit = wait_on_exit
        self.kill_timeout = kill_timeout

    def quit(self):
        if self.wait_on_exit:
            logging.debug('Waiting for %d processes to quit', len(self.processes))
            for p in self.processes:
                p.wait()
        self.mainloop.quit()

    def cleanup_processes(self):
        for p in self.processes:
            if self.stop_processes:
                logging.debug('Stopping PID %d', p.pid)
                p.terminate()
            if self.kill_processes:
                try:
                    p.wait(timeout=self.kill_timeout)
                except subprocess.TimeoutExpired:
                    logging.debug('Killing PID %d', p.pid)
                    p.kill()
            p.poll()
            if p.returncode is not None:
                self.processes.remove(p)

    def run_script(self, event, path, env):
        logging.debug('%s: %s', event, path)
        p = subprocess.Popen(path, env=env)
        self.processes.append(p)

    def run_scripts(self, event, dirpath):
        logging.debug('%s: %s', event, dirpath)

        env = os.environ.copy()
        env['PRESENCED_STATE'] = event

        if not os.path.isdir(dirpath):
            return

        for path in os.listdir(dirpath):
            realpath = os.path.join(dirpath, path)

            if not os.path.isfile(realpath):
                continue

            # if not executable
            if not stat.S_IXUSR & os.stat(realpath)[stat.ST_MODE]:
                continue

            self.run_script(event=event, path=realpath, env=env)

    def run_all_scripts(self, state_str):
        self.cleanup_processes()
        if state_str in self.dirs:
            self.run_scripts(state_str, self.dirs[state_str])
        if 'both' in self.dirs:
            self.run_scripts(state_str, self.dirs['both'])

    def on_signal(self, dbus_state, member=None):
        if member != 'StatusChanged':
            return
        state_str = 'active'
        if dbus_state != 0:
            state_str = 'idle'
        if state_str not in self.events:
            return
        if self.output_format is not None:
            print(self.output_format.format(
                state_id=dbus_state,
                state=state_str
            ))
        if not self.no_scripts:
            self.run_all_scripts(state_str)
        if self.one_shot:
            self.quit()


def main():
    args = parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    logging.debug('Script directories:')
    logging.debug('Idle: %s', args.idle_dir)
    logging.debug('Active: %s', args.active_dir)
    logging.debug('Both: %s', args.both_dir)
    DBusGMainLoop(set_as_default=True)
    mainloop = GLib.MainLoop()
    bus = dbus.SessionBus()
    events = args.events
    if events is not None:
        events = [event.lower().strip() for event in events.split(',')]
    state_handler = StateHandler(
        mainloop=mainloop,
        bus=bus,
        idle_dir=args.idle_dir,
        active_dir=args.active_dir,
        both_dir=args.both_dir,
        one_shot=args.one_shot,
        no_scripts=args.no_scripts,
        output_format=args.output_format,
        events=events,
        stop_processes=args.stop_processes,
        kill_processes=args.kill_processes,
        wait_on_exit=args.wait_on_exit,
        kill_timeout=args.kill_timeout
    )
    bus.add_signal_receiver(
        state_handler.on_signal,
        path='/org/gnome/SessionManager/Presence',
        dbus_interface='org.gnome.SessionManager.Presence',
        member_keyword='member'
    )
    if args.active_on_start:
        logging.debug('--active-on-start specified')
        state_handler.run_all_scripts('active')
    logging.debug('Running Main Loop')
    mainloop.run()
    state_handler.quit()


if __name__ == '__main__':
    main()